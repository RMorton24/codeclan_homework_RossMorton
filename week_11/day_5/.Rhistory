library(tidyverse)
read_csv(here::here("data/orange_juice.csv"))
orange_juice <- read_csv(here::here("data/orange_juice.csv"))
skimr::skim(orange_juice)
orange_juice
orange_juice <- read_csv(here::here("data/orange_juice.csv")) %>%
janitor::clean_names()
skimr::skim(orange_juice)
orange_juice
alias(purchase ~ ., orange_juice)
orange_juice %>%
mutate(across(where(is.character()), .fns = as.factor))
mutate(across(where(is.character, .fns = as.factor))
orange_juice %>%
orange_juice %>%
mutate(across(where(is.character), .fns = as.factor))
library(tidyverse)
library(GGally)
library(modelr)
library(glmulti)
orange_juice <- read_csv(here::here("data/orange_juice.csv")) %>%
janitor::clean_names()
skimr::skim(orange_juice)
orange_juice %>%
mutate(across(.fns = ~replace(., duplicated(.), NA))) %>%
map(~ .x %>%
as_tibble %>%
arrange(desc(value))) %>%
bind_cols %>%
set_names(names(orange_juice))
tictoc::tic()
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train_orange,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
library(tidyverse)
library(GGally)
library(modelr)
library(glmulti)
# Create the index for samples
sample_index <- sample(1:nrow(orange_juice_clean), 0.3 * nrow(orange_juice_clean))
orange_juice_clean <- orange_juice %>%
mutate(purchase_mm = if_else(purchase == "MM", 1 ,0)) %>%
select(-c(purchase, store7, store_id, sale_price_ch, sale_price_mm, list_price_diff, price_diff)) %>%
mutate(across(where(is.character), .fns = as.factor))
# Create the index for samples
sample_index <- sample(1:nrow(orange_juice_clean), 0.3 * nrow(orange_juice_clean))
# Create the test set
test_orange <- slice(orange_juice_clean, sample_index)
# Create the training set
train_orange <- slice(orange_juice_clean, -sample_index)
train_orange %>%
summarise(across(where(is.numeric), .fns = sd))
tictoc::tic()
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train_orange,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
tictoc::toc()
summary(glmulti_search_all_mains)
glmulti_search_all_mains$bestmodel
summary(glmulti_search_all_mains)
summary(glmulti_search_all_mains)$bestmodel
glmulti_search_all_mains
glmulti_search_all_with_pairs[1]
glmulti_search_all_mains[1]
weightable(glmulti_search_all_mains)
tictoc::tic()
glmulti_search_all_with_pairs <- glmulti(
summary(glmulti_search_all_mains)$bestmodel,
data = train_orange,
level = 2,
method = "h",
crit = "bic",
confsetsize = 10,
plotty = F,
report = T,
fitfunction = "glm",
family = binomial(link = "logit"))
tictoc::toc()
summary(glmulti_search_all_mains)
tictoc::tic()
glmulti_search_all_with_pairs <- glmulti(
summary(glmulti_search_all_mains)$bestmodel,
data = train_orange,
level = 2,               # Interactions considered
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
marginality = TRUE,      # consider pairs only if both main effects in model
minsize = 6,             # minsize, maxsize and marginality here force
maxsize = 6,             # inclusion of a single pair beyond the five main effects
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
tictoc::toc()
summary(glmulti_search_all_mains)
glmulti_search_all_with_pairs <- glmulti(
summary(glmulti_search_all_mains)$bestmodel,
data = train_orange,
level = 2,               # Interactions considered
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
marginality = TRUE,      # consider pairs only if both main effects in model
minsize = 6,             # minsize, maxsize and marginality here force
maxsize = -1,             # inclusion of a single pair beyond the five main effects
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)$bestmodel
test_glmulti <- glmulti(
purchase_mm ~ .,
data = train_orange,
level = 1,               # No interactions considered, main effects only
method = "d",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit"))
orange_juice %>%
mutate(purchase_mm = if_else(purchase == "MM", 1 ,0)) %>%
select(-c(purchase, store7, store_id, sale_price_ch, sale_price_mm, list_price_diff, price_diff)) %>%
mutate(across(where(is.character) | contains(c("store", "special")), .fns = as.factor))
orange_juice_clean <- orange_juice %>%
mutate(purchase_mm = as.factor(if_else(purchase == "MM", 1 ,0))) %>%
select(-c(purchase, store7, store_id, sale_price_ch, sale_price_mm, list_price_diff, price_diff)) %>%
mutate(across(where(is.character) | contains(c("store", "special")), .fns = as.factor))
alias(purchase_mm ~ ., orange_juice_clean)
# Create the index for samples
sample_index <- sample(1:nrow(orange_juice_clean), 0.3 * nrow(orange_juice_clean))
# Create the test set
test_orange <- slice(orange_juice_clean, sample_index)
# Create the training set
train_orange <- slice(orange_juice_clean, -sample_index)
train_orange %>%
summarise(across(where(is.numeric), .fns = sd))
ggpairs(train_orange, progress = FALSE)
summary(glmulti_search_all_mains)
summary(glmulti_search_all_with_pairs)
library(caret)
summary(glmulti_search_all_with_pairs)$bestmodel
weightable(glmulti_search_all_with_pairs)
weightable(glmulti_search_all_with_pairs)[1,1]
glmulti_search_all_with_pairs@formulas
glmulti_search_all_with_pairs@formulas[1]
k_fold <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
k_fold_model <- train(glmulti_search_all_with_pairs@formulas[1],
data = train_orange,
trControl = k_fold,
method = "glm")
k_fold_model <- train(purchase_mm ~ 1 + price_mm + disc_mm + loyal_ch + store + disc_mm:price_mm +
store:disc_mm,
data = train_orange,
trControl = k_fold,
method = "glm")
summary(k_fold_model)
orange_precict <- test_orange %>%
add_predictions(k_fold_model, type = "respons")
orange_precict <- test_orange %>%
add_predictions(k_fold_model, type = "response")
test_orange
test_orange %>%
add_predictions(k_fold_model, type = "response")
orange_precict <- test_orange %>%
add_predictions(k_fold_model)
orange_precict
confusionMatrix(test_orange$purchase_mm, test_orange$pred)
glance(glmulti_search_all_with_pairs)
library(broom)
glance(glmulti_search_all_with_pairs)
glance(k_fold_model)
glance(k_fold_model$finalModel)
confusionMatrix(test_orange$pred, test_orange$purchase_mm)
test_orange$pred
orange_predict <- test_orange %>%
add_predictions(k_fold_model)
confusionMatrix(orange_predict$pred, orange_predict$purchase_mm)
glmulti_search_all_mains@formulas[1]
# Complete this for the original gmulti model
k_fold_gmulti1 <- train(purchase_mm ~ 1 + price_mm + disc_mm + loyal_ch + store,
data = train_orange,
trControl = k_fold,
method = "glm")
summary(k_fold_gmulti1)
library(ROC)
library(pROC)
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1, type = "response")
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1$finalModel, type = "response")
train_orange
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1$finalModel)
train_orange %>%
add_predictions(k_fold_gmulti1)
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1) %>%
roc(response = purchase_mm, predictor = pred)
train_orange %>%
add_predictions(k_fold_gmulti1)
train_orange %>%
add_predictions(k_fold_gmulti1) %>%
roc(response = purchase_mm, predictor = pred
)
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1) %>%
roc(response = purchase_mm, predictor = pred)
auc(k_fold_gmulti1)
k_fold_gmulti1
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
train_orange %>%
add_predictions(k_fold_gmulti1, type = "prob")
train_orange %>%
add_predictions(k_fold_gmulti1, type = "raw")
k_fold_gmulti1$modelInfo
k_fold_gmulti1$predict
summary(glm(purchase_mm ~ 1 + price_mm + disc_mm + loyal_ch + store,
data = train_orange,
family = binomial(link = "logit")))
train_orange %>%
add_predictions(glmulti_search_all_mains, type = "raw") %>%
roc(response = purchase_mm, predictor = pred)
train_orange %>%
add_predictions(glmulti_search_all_mains@objects[1], type = "raw") %>%
roc(response = purchase_mm, predictor = pred)
train_orange %>%
add_predictions(glmulti_search_all_mains@objects[1], type = "repsonse") %>%
roc(response = purchase_mm, predictor = pred)
multi_mod_1 <- glm(purchase_mm ~ 1 + price_mm + disc_mm + loyal_ch + store,
data = train_orange,
family = binomial(link = "logit")))
multi_mod_1 <- glm(purchase_mm ~ 1 + price_mm + disc_mm + loyal_ch + store,
data = train_orange,
family = binomial(link = "logit"))
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1$finalModel, type = "repsonse") %>%
roc(response = purchase_mm, predictor = pred)
roc_obj_1 <- train_orange %>%
add_predictions(k_fold_gmulti1$finalModel, type = "link") %>%
roc(response = purchase_mm, predictor = pred)
multi_mod_2 <- glm(purchase_mm ~ 1 + price_mm + disc_mm + loyal_ch + store + disc_mm:price_mm +
store:disc_mm,
data = train_orange,
family = binomial(link = "logit"))
roc_obj_1 <- train_orange %>%
add_predictions(multi_mod_1, type = "repsonse") %>%
roc(response = purchase_mm, predictor = pred)
roc_obj_1 <- train_orange %>%
add_predictions(multi_mod_1, type = "link") %>%
roc(response = purchase_mm, predictor = pred)
roc_obj_1 <- train_orange %>%
add_predictions(multi_mod_2, type = "link") %>%
roc(response = purchase_mm, predictor = pred)
roc_obj_1 <- train_orange %>%
add_predictions(multi_mod_1, type = "link") %>%
roc(response = purchase_mm, predictor = pred)
roc_obj_2 <- train_orange %>%
add_predictions(multi_mod_2, type = "link") %>%
roc(response = purchase_mm, predictor = pred)
ggroc(
data = list(roc_obj_1,
roc_obj_2),
legacy.axes = TRUE
)
auc(roc_obj_1)
auc(roc_obj_2)
confusionMatrix(orange_predict$pred, orange_predict$purchase_mm)
glance(k_fold_model$finalModel)
library(broom)
glance(k_fold_model$finalModel)
glance(k_fold_gmulti1$finalModel)
orange_predict_original <- test_orange %>%
add_predictions(k_fold_gmulti1)
confusionMatrix(orange_predict$pred, orange_predict$purchase_mm)
confusionMatrix(orange_predict_original$pred, orange_predict_original$purchase_mm)
